generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model PlatformSettings {
  key       String   @id @unique
  service   String?
  value     Json
  isEnabled Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@map("platform_settings")
}

model AssetsCategories {
  id          String                     @id @default(uuid()) @db.Uuid
  name        String
  description String?
  sortBy      Int                        @default(0) @db.SmallInt
  disabledAt  DateTime?
  publishAt   DateTime?
  createdAt   DateTime                   @default(now())
  updatedAt   DateTime                   @updatedAt
  assets      AssetsCategoriesOnAssets[]

  @@map("assets_categories")
}

model Assets {
  id         String                     @id @default(uuid()) @db.Uuid
  fileName   String
  path       String
  bucket     String
  publicUrl  String
  sortBy     Int                        @default(0) @db.SmallInt
  metaData   Json
  disabledAt DateTime?
  publishAt  DateTime?
  createdAt  DateTime                   @default(now())
  updatedAt  DateTime                   @updatedAt
  categoies  AssetsCategoriesOnAssets[]

  @@map("assets")
}

model AssetsCategoriesOnAssets {
  assetId      String           @db.Uuid
  categoryId   String           @db.Uuid
  assignedAt   DateTime         @default(now())
  assignedById String           @db.Uuid
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  asset        Assets           @relation(fields: [assetId], references: [id])
  category     AssetsCategories @relation(fields: [categoryId], references: [id])

  @@id([assetId, categoryId])
  @@index([assetId])
  @@index([assignedById])
  @@index([categoryId])
  @@map("assets_categories_has_assets")
}

model ActivityLog {
  id        String   @id @default(uuid()) @db.Uuid
  action    Int      @default(0)
  referalIp String
  entityId  String?
  message   String?
  userId    String?  @db.Uuid
  metaData  Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User?    @relation(fields: [userId], references: [id])

  @@index([userId])
  @@map("activity_log")
}

model User {
  id             String        @id @default(uuid()) @db.Uuid
  username       String        @unique @db.VarChar(100)
  email          String        @unique @db.VarChar(500)
  mobile         String?       @unique @db.VarChar(20)
  fullName       String        @db.VarChar(100)
  displayName    String        @db.VarChar(100)
  authUserId     String        @unique @db.VarChar(500)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  activitiys     ActivityLog[]

  @@index([id])
  @@map("users")
}
