generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model PlatformSettings {
  key       String   @id @unique
  service   String?
  value     Json
  isEnabled Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@map("platform_settings")
}

model AssetsCategories {
  id          String                     @id @default(uuid()) @db.Uuid
  name        String
  description String?
  sortBy      Int                        @default(0) @db.SmallInt
  disabledAt  DateTime?
  publishAt   DateTime?
  createdAt   DateTime                   @default(now())
  updatedAt   DateTime                   @updatedAt
  assets      AssetsCategoriesOnAssets[]

  @@map("assets_categories")
}

model Assets {
  id         String                     @id @default(uuid()) @db.Uuid
  fileName   String
  path       String
  bucket     String
  publicUrl  String
  sortBy     Int                        @default(0) @db.SmallInt
  metaData   Json
  disabledAt DateTime?
  publishAt  DateTime?
  createdAt  DateTime                   @default(now())
  updatedAt  DateTime                   @updatedAt
  categoies  AssetsCategoriesOnAssets[]

  @@map("assets")
}

model AssetsCategoriesOnAssets {
  assetId      String           @db.Uuid
  categoryId   String           @db.Uuid
  assignedAt   DateTime         @default(now())
  assignedById String           @db.Uuid
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  asset        Assets           @relation(fields: [assetId], references: [id])
  category     AssetsCategories @relation(fields: [categoryId], references: [id])

  @@id([assetId, categoryId])
  @@index([assetId])
  @@index([assignedById])
  @@index([categoryId])
  @@map("assets_categories_has_assets")
}

model ActivityLog {
  id        String   @id @default(uuid()) @db.Uuid
  action    Int      @default(0)
  referalIp String
  message   String?
  userId    String?  @db.Uuid
  metaData  Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User?    @relation(fields: [userId], references: [id])

  @@index([userId])
  @@map("activity_log")
}

model User {
  id                   String                     @id @default(uuid()) @db.Uuid
  email                String?                    @unique
  emailVerified        DateTime?
  mobile               String?                    @unique
  mobileVerified       DateTime?
  image                String?
  disabledAt           DateTime?
  disabledForeverAt    DateTime?
  verifiedAccessAt     DateTime?
  verifiedAccessMethod VerificationRequestType    @default(Email)
  createdAt            DateTime                   @default(now())
  updatedAt            DateTime                   @updatedAt
  password             String
  activitiys           ActivityLog[]
  userProfile          UserProfile?
  access               UserOnRolesOrPermissions[]
  verificationRequests VerificationRequest[]

  @@index([id])
  @@map("users")
}

model UserOnRolesOrPermissions {
  id           BigInt       @id @default(autoincrement())
  userId       String       @db.Uuid
  roleId       String?      @db.Uuid
  permissionId String?      @db.Uuid
  assignedAt   DateTime     @default(now())
  assignedById String       @db.Uuid
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  permission   Permissions? @relation(fields: [permissionId], references: [id])
  role         Roles?       @relation(fields: [roleId], references: [id])
  user         User         @relation(fields: [userId], references: [id])

  @@unique([userId, permissionId, roleId])
  @@index([assignedById])
  @@index([userId, permissionId, roleId])
  @@map("users_has_roles_permissions")
}

model RolesOnPermissions {
  roleId       String      @db.Uuid
  permissionId String      @db.Uuid
  assignedAt   DateTime    @default(now())
  assignedById String      @db.Uuid
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  permission   Permissions @relation(fields: [permissionId], references: [id])
  role         Roles       @relation(fields: [roleId], references: [id])

  @@id([roleId, permissionId])
  @@index([assignedById])
  @@index([permissionId])
  @@index([roleId])
  @@map("roles_has_permissions")
}

model Permissions {
  id          String                     @id @default(uuid()) @db.Uuid
  name        String                     @unique
  guradName   String                     @unique
  description String?
  isEnabled   Boolean                    @default(true)
  isGrend     Boolean                    @default(true)
  isAllow     Boolean                    @default(true)
  isDeletable Boolean                    @default(true)
  createdAt   DateTime                   @default(now())
  updatedAt   DateTime                   @updatedAt
  roles       RolesOnPermissions[]
  users       UserOnRolesOrPermissions[]

  @@map("permissions")
}

model Roles {
  id          String                     @id @default(uuid()) @db.Uuid
  name        String                     @unique
  guradName   String                     @unique
  description String?
  isEnabled   Boolean                    @default(true)
  isGrend     Boolean                    @default(true)
  isDeletable Boolean                    @default(true)
  createdAt   DateTime                   @default(now())
  updatedAt   DateTime                   @updatedAt
  permissions RolesOnPermissions[]
  users       UserOnRolesOrPermissions[]

  @@map("roles")
}

model UserProfile {
  id        BigInt   @id @default(autoincrement())
  firstName String
  lastName  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @unique @db.Uuid
  user      User     @relation(fields: [userId], references: [id])

  @@map("user_profile")
}

model UserAccess {
  id                 String    @id @default(uuid())
  compoundId         String    @unique
  userId             String    @db.Uuid
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  @@index([providerAccountId])
  @@index([providerId])
  @@index([userId])
  @@map("userAccess")
}

model VerificationRequest {
  id          BigInt                  @id @default(autoincrement())
  userId      String                  @db.Uuid
  temp_secret String
  type        VerificationRequestType
  metaData    Json?
  status      Int                     @default(0) @db.SmallInt
  createdAt   DateTime                @default(now())
  updatedAt   DateTime                @updatedAt
  user        User                    @relation(fields: [userId], references: [id])

  @@index([userId])
  @@map("verification_requests")
}

model MatchsMoves {
  id           String @id @default(uuid())
  matchId      String @db.Uuid
  boardMoveIdx Int
}

model Matchs {
  id            String      @id @default(uuid())
  matchMode     MatchMode   @default(Free)
  stakeForMatch Int         @default(0)
  privateMatch  Boolean     @default(false)
  player1       String      @db.Uuid
  player1Wins   Int
  player2       String      @db.Uuid
  player2Wins   Int
  totalMatchs   Int         @default(1)
  status        MatchStatus @default(Draft)

  @@index([player1, player2])
  @@map("matchs")
}

enum MatchStatus {
  Draft
  Open
  InProcess
  Close
}

enum MatchMode {
  Free
  Points
  TimedTurn
  UpToPoints
}

enum VerificationRequestType {
  Mobile
  Email
}
